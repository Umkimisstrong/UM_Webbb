■■■ GET 방식과 POST 방식 ■■■
    (데이터 전송 / 페이지 요청)

▶ 사용자(클라이언트)의 페이지 요청 =======→ 서버 Init() / service() service() service() ... / Destroy()
 

○ GET 방식
https://n.news.naver.com/article/006/0000112707?cds=news_media_pc&type=editn    

      가. https://n.news.naver.com/article/006/0000112707?  → 요청 페이지
      나. cds=news_media_pc&type=editn    		    → 전송 데이터	
    - 엽서를 보내는 방식과 유사한 전송 / 요청
    - 주소 + 데이터(모두노출)
    - 전송할 데이터를문자열 형태(Query String)로 URL 뒤에 
      인수로 붙여 전송
    - URL 뒤에 인수로 붙어있는 내용을 누구나 볼 수 있고
      이로인해 보안성이 취약
    - 또한 데이터량에 한계가 있음(보내는데 .. 과거)
      많은 데이터를 보내는 경우 일정 크기 이상에서는 잘림
        (URL 최대 길이 2048char) → 지금은 아님

    - 특히나 <form> 태그에서의 GET 방식은
      서버로 데이터를 전송하는 과정에서 지연될 경우
      중복해서 요청이 이루어진다는 문제발생

    - 형식 및 구조
        『URL주소?속성=데이터&속성=데이터&...』
        『URL주소?name=value&tel=value2&...』 

    - select 적 성격을 가지고있음                   → 조회 할 때 조건
      서버에서 데이터를 가지고 와서 보여준다거나 하는 용도로 주로 사용
      서버의 값이나 상태를 바꾸는 용도로는 사용 X
      즉 단순 페이지 요청에 많이 사용됨

    - 장점은 여러가지 형태를 통해 간편한 데이터전송 가능
      POST 방식처럼 form 태그를 사용하여 전송도 하고,
      링그에 직접 걸어 사용해도되고, 주소창에 직접입력해도됨
      
ex)
< a href = "http://URL?키=값&키=값">
 < form action="http://URL?키=값&키=값">
window.open(href="http://url?키=값&키=값");
window.location.href="http://url?키=값&키=값";
window.location.replace=("http://url?키=값&키=값");

○ POST 방식
   ex) http://localhost:8090/WebApp04/jsptest005.jsp
 
   - 주소만 노출 / 데이터는 숨김
   - <form> 태그에서 method 속성을 "post"로 설정해서 요청
   - 파일의 형태로 전송되기 때문에 URL 상에서는 내용이 나타나지 않는다.
     이로 인해 GET 방식에 비해 보안성이 높다고 할 수 있다.
   - POST 방식은 HTTP body 안에 숨겨져서 전송된다.
   - GET 방식처럼 URL 뒷부분에 추가해서 보내는 것이 아니라
     HTTP body 안에 넣어서 보내기 때문에 GET 방식에서 발생할 수 있는
     보안성 문제를 어느정도 해결할 수 있다.
   - GET 방식에 비해 대용량의 데이터를 전송할 때 사용한다.
   - <form>태그를 이용해서 submit 하는 일반적인 형태가 POST 방식이다.
   - POST 방식은 서버의 값이나 상태를 바꾸기 위해 주로 사용한다.
     글쓰기를 하게되면 글의 내용이 데이터베이스에 저장되고
     수정을 하게되면 데이터베이스에 수정된 값이 적용될 수 있도록 처리하는 구성인것..

























